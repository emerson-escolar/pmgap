gap> CG:=CommGridPathAlgebra(GF(2), 2, 3);
<GF(2)[<quiver with 6 vertices and 7 arrows>]/<two-sided ideal in <GF(2)[<quiver with 6 vertices and 7 arrows>]>,  (2 generators)>>
gap> S:=IntervalRepnsList(CG);
[ <[ 1, 0, 0, 0, 0, 0 ]>, <[ 1, 1, 0, 0, 0, 0 ]>, <[ 0, 1, 0, 0, 0, 0 ]>, <[ 1, 1, 1, 0, 0, 0 ]>,
  <[ 0, 1, 1, 0, 0, 0 ]>, <[ 0, 0, 1, 0, 0, 0 ]>, <[ 0, 0, 0, 1, 0, 0 ]>, <[ 0, 0, 0, 1, 1, 0 ]>,
  <[ 0, 0, 0, 0, 1, 0 ]>, <[ 0, 0, 0, 1, 1, 1 ]>, <[ 0, 0, 0, 0, 1, 1 ]>, <[ 0, 0, 0, 0, 0, 1 ]>,
  <[ 1, 0, 0, 1, 0, 0 ]>, <[ 1, 1, 0, 1, 0, 0 ]>, <[ 1, 1, 0, 1, 1, 0 ]>, <[ 0, 1, 0, 1, 1, 0 ]>,
  <[ 0, 1, 0, 0, 1, 0 ]>, <[ 1, 1, 1, 1, 0, 0 ]>, <[ 1, 1, 1, 1, 1, 0 ]>, <[ 1, 1, 1, 1, 1, 1 ]>,
  <[ 0, 1, 1, 1, 1, 0 ]>, <[ 0, 1, 1, 1, 1, 1 ]>, <[ 0, 1, 1, 0, 1, 0 ]>, <[ 0, 1, 1, 0, 1, 1 ]>,
  <[ 0, 0, 1, 1, 1, 1 ]>, <[ 0, 0, 1, 0, 1, 1 ]>, <[ 0, 0, 1, 0, 0, 1 ]> ]
gap> CLIntervalrepr:=S[20];
<[ 1, 1, 1, 1, 1, 1 ]>
gap> testCLa:=RightModuleOverPathAlgebra( CG, [1,2,3,4,5,6],
> [ ["1_a_1",[ [ 0*Z(2), 0*Z(2) ] ] ],
> ["1_a_2", [ [Z(2)^0, 0*Z(2)^0, Z(2)^0 ], [ 0*Z(2)^0, 0*Z(2)^0, Z(2)^0 ] ] ],
>   ["2_a_1",[ [ 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0 ], [ Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2) ],
>   [ Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0 ] ] ],
>   ["2_a_2",[ [ Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0 ], [ Z(2)^0, 0*Z(2), 0*Z(2), Z(2)^0, 0*Z(2), 0*Z(2) ],
>   [ Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), Z(2)^0, 0*Z(2) ],
>   [ Z(2)^0, 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), Z(2)^0 ]]],["a_1_1", [ [ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ] ] ],
>   ["a_1_2", [ [ 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ], [ Z(2)^0, 0*Z(2), 0*Z(2), 0*Z(2), 0*Z(2) ] ]]
>   ,["a_1_3", [ [ Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, 0*Z(2) ],
>   [ Z(2)^0, 0*Z(2), Z(2)^0, Z(2)^0, Z(2)^0, Z(2)^0 ]]] ]);
<[ 1, 2, 3, 4, 5, 6 ]>
gap> testCLb:=RightModuleOverPathAlgebra( CG, [0,1,1,1,2,1],[  ["2_a_1",[[1*Z(2) , 0*Z(2)^0 ]] ],["2_a_2",[[1*Z(2)^0 ], [0*Z(2)^0 ]] ],["1_a_2", [[1*Z(2)^0]] ],  ["a_1_2", [[1*Z(2)^0, 1*Z(2)^0]]] ,["a_1_3", [[1*Z(2)^0]] ] ]  );
<[ 0, 1, 1, 1, 2, 1 ]>
gap> testCLd:=S[20];
<[ 1, 1, 1, 1, 1, 1 ]>
gap> CompressedMultiplicityVer2(testCLa,CLIntervalrepr);
0
gap> CompressedMultiplicityVer2(testCLb,CLIntervalrepr);
0
gap> CompressedMultiplicityVer2(testCLd,CLIntervalrepr);
1
gap> for i in S do
>   Print(CompressedMultiplicityVer2(testCLa,i)," ");
> od;
1 0 2 0 2 3 4 4 5 4 5 6 0 0 0 0 1 0 0 0 0 0 1 1 1 2 2
gap> for i in S do
>   for j in S do
>   Print(CompressedMultiplicityVer2(j,i)," ");
>   od;
> od;
1 1 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 0
0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0
0 0 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 1 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0
1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1
0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 1 1 1 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 1
gap> for i in S do
>   Print(CompressedMultiplicityVer2(i,i)," ");
> od;
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
gap> CompressedMultiplicityVer2(S[5],S[7]);
0
gap> CompressedMultiplicityVer2List(testCLa);
[ [ <[ 1, 0, 0, 0, 0, 0 ]>, 1 ], [ <[ 1, 1, 0, 0, 0, 0 ]>, 0 ], [ <[ 0, 1, 0, 0, 0, 0 ]>, 2 ], [ <[ 1, 1, 1, 0, 0, 0 ]>, 0 ],
  [ <[ 0, 1, 1, 0, 0, 0 ]>, 2 ], [ <[ 0, 0, 1, 0, 0, 0 ]>, 3 ], [ <[ 0, 0, 0, 1, 0, 0 ]>, 4 ], [ <[ 0, 0, 0, 1, 1, 0 ]>, 4 ],
  [ <[ 0, 0, 0, 0, 1, 0 ]>, 5 ], [ <[ 0, 0, 0, 1, 1, 1 ]>, 4 ], [ <[ 0, 0, 0, 0, 1, 1 ]>, 5 ], [ <[ 0, 0, 0, 0, 0, 1 ]>, 6 ],
  [ <[ 1, 0, 0, 1, 0, 0 ]>, 0 ], [ <[ 1, 1, 0, 1, 0, 0 ]>, 0 ], [ <[ 1, 1, 0, 1, 1, 0 ]>, 0 ], [ <[ 0, 1, 0, 1, 1, 0 ]>, 0 ],
  [ <[ 0, 1, 0, 0, 1, 0 ]>, 1 ], [ <[ 1, 1, 1, 1, 0, 0 ]>, 0 ], [ <[ 1, 1, 1, 1, 1, 0 ]>, 0 ], [ <[ 1, 1, 1, 1, 1, 1 ]>, 0 ],
  [ <[ 0, 1, 1, 1, 1, 0 ]>, 0 ], [ <[ 0, 1, 1, 1, 1, 1 ]>, 0 ], [ <[ 0, 1, 1, 0, 1, 0 ]>, 1 ], [ <[ 0, 1, 1, 0, 1, 1 ]>, 1 ],
  [ <[ 0, 0, 1, 1, 1, 1 ]>, 1 ], [ <[ 0, 0, 1, 0, 1, 1 ]>, 2 ], [ <[ 0, 0, 1, 0, 0, 1 ]>, 2 ] ]

